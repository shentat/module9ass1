sum(df[, 4])
fileURL<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv "
download.file(fileURL,destfile="./data/survey.csv")
surveyData <- read.csv("./data/survey.csv")
x <- subset(surveyData, ACR==3 & AGS==6)
head(x
)
y <- ifelse((surveyData$ACR==3 & AGS==6), TRUE, FALSE)
y <- ifelse((surveyData$ACR==3 & surveyData$AGS==6), TRUE, FALSE)
class(y)
which(y)
which(y, 3)
head(which(y), 3)
install.packages("jpeg")
library(jpeg)
fileURL<-"https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(fileURL,destfile="./data/jeff.jpg")
img <- readJPEG(system.file("img", "./data/jeff.jpg", package="jpeg"))
download.file(fileURL,destfile="./data/jeff.jpg", mode="wb")
img <- readJPEG(system.file("img", "./data/jeff.jpg", package="jpeg"))
z<-tempfile()
download.file(fileURL,z,mode="wb")
pic <- readJPEG(z)
file.remove(z)
quantile(pic, probs=c(0.3,0.8))
z<-tempfile()
download.file(fileURL,z,mode="wb")
pic <- readJPEG(z, native = TRUE)
file.remove(z)
quantile(pic, probs=c(0.3,0.8))
fileURL1<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
fileURL2<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
surveyData <- read.csv("./data/survey.csv")
download.file(fileURL1,destfile="./data/survey1.csv")
download.file(fileURL2,destfile="./data/survey2.csv")
surveyData1 <- read.csv("./data/survey1.csv")
surveyData2 <- read.csv("./data/survey2.csv")
names(surveyData1)
names(surveyData2)
head(surveyData1, 3)
head(surveyData1, 10)
head(surveyData1, 5)
surveyData1[-4,]
head(surveyData1[-4,],3)
head(surveyData1[-c(1:4),],3)
head(surveyData1, 5)
surveyData1_clean<-head(surveyData1[-c(1:4),],3)
head(surveyData1_clean, 5)
head(surveyData1_clean)
surveyData1_clean<-surveyData1[-c(1:4),]
head(surveyData1_clean, 5)
names(surveyData2)
head(surveyData2)
mergedData<-merge(surveyData1_clean, surveyData2, by.x="X", by.y="CountryCode", all=TRUE)
sort(mergedData, decreasing=TRUE)
sort(mergedData$)
names(mergedData)
sort(mergedData$"Gross.domestic.product.2012",decreasing=TRUE)
head(mergedData)
View(surveyData1_clean)
View(surveyData2)
mergedData<-merge(surveyData1_clean, surveyData2, by.x="X", by.y="CountryCode", all=TRUE)
View(mergedData)
class(surveyData1_clean)
class(surveyData2)
mergedData<-merge(surveyData1_clean, surveyData2, by.x="X", by.y="CountryCode")
View(mergedData)
mergedData<-merge(surveyData1_clean, surveyData2, by.x="X", by.y="CountryCode", all=TRUE)
View(mergedData)
mergedData<-merge(surveyData1_clean, surveyData2, by.x="X", by.y="CountryCode")
View(mergedData)
sort(mergedData$"Gross.domestic.product.2012",decreasing=TRUE)
View(mergedData)
sortedData<-sort(mergedData$"Gross.domestic.product.2012",decreasing=TRUE)
View(mergedData)
install.packages("dplyr")
library(dplyr)
View(mergedData)
mergedData<-rename(mergedData, GDP=Gross.domestic.product.2012)
View(mergedData)
sortedData<-sort(mergedData$GDP,decreasing=TRUE)
sort(mergedData$GDP,decreasing=TRUE)
order(mergedData$GDP,decreasing=TRUE)
View(mergedData)
indx<-order(mergedData$GDP,decreasing=TRUE)
sortedData<-mergedData[indx,]
View(sortedData)
arrange(mergedData, desc(GDP))
sortedData<-arrange(mergedData, desc(GDP))
View(sortedData)
sortedData<-arrange(mergedData, desc(as.numeric(GDP))
)
View(sortedData)
View(sortedData)
sortedData<-arrange(mergedData, desc(as.integer(GDP))
)
sortedData<-arrange(mergedData, desc(as.integer(GDP)))
View(sortedData)
sortedData<-arrange(mergedData, desc(as.numeric(GDP)))
View(sortedData)
sortedData<-arrange(mergedData, desc(as.factor(GDP))
)
View(sortedData)
class(mergedData$GDP)
sortedData<-arrange(mergedData, desc(as.numeric(GDP)))
class(mergedData$GDP)
sortedData<-arrange(mergedData, desc(as.numeric(levels(GDP))[GDP]))
View(sortedData)
sortedData[13,]
View(mergedData)
View(sortedData)
select(sortedData, matches("High income: OECD"))
subset(sortedData, sortedData$Income.Group="High income: OECD")
subset(sortedData, sortedData$Income.Group=="High income: OECD")
OECD<-subset(sortedData, sortedData$Income.Group=="High income: OECD")
View(OECD)
colMeans(OECD)
colMeans(OECD$GDP)
class(OECD)
mean(OECD)
mean(OECD$GDP)
mean(OECD$as.numeric(GDP)
)
mean(as.numeric(OECD$GDP)
)
mean(as.numeric(OECD$GDP))
mean(as.numeric(levels(GDP))[GDP])
mean(as.numeric(levels(OECD$GDP))[OECD$GDP])
OECD<-subset(sortedData, sortedData$Income.Group=="High income: nonOECD")
mean(as.numeric(levels(OECD$GDP))[OECD$GDP])
View(OECD)
mean(as.numeric(levels(OECD$GDP))[OECD$GDP])
mean(as.numeric(levels(OECD$GDP))[OECD$GDP],na.rm=T)
cut(sortedData, 2)
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
cutGroup<-cut2(sortedData,g=5)
cutGroup<-cut2(sortedData$GDP,g=5)
cutGroup<-cut2(as.numeric(levels(sortedData$GDP))[sortedData$GDP],g=5)
table(cutGroup)
View(sortedData)
table(cutGroup, sortedData$Income.Group)
fileURL<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileURL,destfile="./data/survey.csv")
download.file(fileURL,destfile="./data/survey.csv")
surveyData <- read.csv("./data/survey.csv")
names(surveyData)
heaD(surveyData)
head(surveyData)
strsplit(name(surveyData),"wgtp")
strsplit(names(surveyData),"wgtp")
temp<-strsplit(names(surveyData),"wgtp")
class(temp)
temp(123)
temp[123]
fileURL<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileURL,destfile="./data/survey.csv")
surveyData <- read.csv("./data/survey.csv")
names(surveyData)
head(surveyData)
gsub(surveyData$Gross.domestic.product.2012)
surveyData$Gross.domestic.product.2012
head(surveyData)
surveyData$X.3
surveyData[-4]
surveyData[-4,]
surveyData(-4,)
surveyData[5,]
surveyData[5-,]
surveyData[5:,]
num(surveyData)
nums(surveyData)
numrows(surveyData)
numRows(surveyData)
nRows(surveyData)
nRow(surveyData)
nrow(surveyData)
surveyData[5:nrow(surveyData),]
head(surveyData)
head(surveyData[5:nrow(surveyData),])
tail(surveyData[5:nrow(surveyData),])
tail(surveyData[5:194,])
surveyData2<-(surveyData[5:194,])
surveyData2[,4]
surveyData2[,5]
gsub(",","",surveyData2[,5])
mean(as.numeric(gsub(",","",surveyData2[,5]))
)
grep("^United",countryNames)
grep("^United",surveyData$x.4)
grep("^United",surveyData$x.3)
surveyData#x.3
surveyData$x.3
names(surveyData)
surveyData$x.2
surveyData$X.3
surveyData$X.2
head(surveyData)
surveyData$X.2
head(surveyData2)
tail(surveyData2)
surveyData2$X.2
grep("^United",surveyData2$X.2)
count(grep("^United",surveyData2$X.2))
sum(grep("^United",surveyData2$X.2))
surveyData2[grep("^United",surveyData2$X.2)]
surveyData2[grep("^United",surveyData2$X.2),]
count(surveyData2[grep("^United",surveyData2$X.2),])
num(surveyData2[grep("^United",surveyData2$X.2),])
nrows(surveyData2[grep("^United",surveyData2$X.2),])
nRows(surveyData2[grep("^United",surveyData2$X.2),])
nrow(surveyData2[grep("^United",surveyData2$X.2),])
fileURL<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileURL,destfile="./data/survey2.csv")
eduData <- read.csv("./data/survey2.csv")
names(eduData)
head(eduData)
tail(eduData)
eduData
View(eduData)
View(surveyData2)
mergedData<-merge(surveyData2, eduData, by.x="X", by.y="CountryCode")
View(mergedData)
grep("Fiscal year", mergedData$Special.Notes)
mergedData[grep("Fiscal year", mergedData$Special.Notes),]
nrow(mergedData[grep("Fiscal year", mergedData$Special.Notes),])
temp<-mergedData[grep("Fiscal year", mergedData$Special.Notes),]
View(temp)
temp<-mergedData[grep("Fiscal year end: June", mergedData$Special.Notes),]
View(temp)
nrow(mergedData[grep("Fiscal year end: June", mergedData$Special.Notes),])
View(mergedData)
nrow(mergedData[grep("Fiscal year end:( *)June", mergedData$Special.Notes),])
nrow(mergedData[grep("Fiscal( *)year( *)end:( *)June", mergedData$Special.Notes),])
nrow(mergedData[grep("Fiscal( *)[a-z,A-Z]*( *)[a-z,A-Z]*:( *)June", mergedData$Special.Notes),])
nrow(mergedData[grep("Fiscal( *).*( *).*( *)June", mergedData$Special.Notes),])
mergedData[grep("Fiscal( *).*( *).*( *)June", mergedData$Special.Notes),]
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
View(amzn)
nrow(amzn[grep("2012", amzn$row.names),])
class(amzn)
names(amzn)
summary(amzn)
str(amzn)
nrow(amzn[grep("2012", amzn$row.names),])
amzn$row.names
amzn$Index
library(swirl)
install_from_swirl("Getting and Cleaning Data")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
library(swirl)
ls()
rm(list=ls())
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
swirl()
install_from_swirl(Getting and Cleaning Data)
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf<-read.csv("path2csv",stringsAsFactors=FALSE)
mydf<-read.csv(path2csv,stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran,
| r_arch:country)
select(cran,r_arch:country)
select(cran,country:r_arch)
cran''
cran
select(cran, -time)
select(cran, X:size)
select(cran, -5:20)
select(cran, -(X:size)
)
select(cran, -X:size))
select(cran, -X:size)
select(cran, -X:-size)
select(cran, -(X:size))
info()
-5:20
-(5:20)
select(cran, -(5:20)
)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", Country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2<-select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3<-select(cran, ip_id, package, size)
view(cran3)
View(cran3)
View(cran3)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size-1000)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
tbl_df(mydf)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package<-group_by(cran, package)
by_package
summarize(cran, avg_bytes = mean(size))
summarize(by_package, avg_bytes = mean(size))
summarize(by_package, mean(size))
submit()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts<-filter(pack_sum, count>679)
top_counts
View(top_counts)
top_counts_sorted<-arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique<-filter(pack_sum, unique>465)
View(top_unique)
top_unique_sorted<-arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
source('~/.active-rstudio-document', echo=TRUE)
submit()
submit()
submit()
submit()
submit()
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
student2
students2
res<-gather(students2,sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
submit()
?spread
submit()
extract_numeric("class5")
?mutate
submit()
students4
submit()
submit()
students4
submit()
submit()
passed
failed
passed<-mutate(passed, status)
passed<-mutate(passed, status="passed")
failed<-mutate(failed, status="failed")
packageVersion('dplyr')
bind_rows(passed,failed)
sat
submit()
submit()
submit()
submit()
install.packages("knitr")
knitr
knitr()
# Due to the central limit theorem (CLT), the distribution of averages of 40 exponentials is very close to a normal distribution.
source('~/.active-rstudio-document', echo=TRUE)
View(simulation_data)
# plot the histogram of averages
hist(simulation_means, breaks=50, prob=TRUE,
main="Distribution of averages of samples,
drawn from exponential distribution with lambda=0.2",
xlab="")
hist(simulation_means, xlab = "mean", main = "Exponential Function Simulations")
hist(simulation_means, breaks=100, prob=TRUE,
main="Distribution of averages of samples,
drawn from exponential distribution with lambda=0.2",
xlab="")
hist(simulation_means, breaks=10, prob=TRUE,
main="Distribution of averages of samples,
drawn from exponential distribution with lambda=0.2",
xlab="")
hist(simulation_means, breaks=10, prob=F,
main="Distribution of averages of samples,
drawn from exponential distribution with lambda=0.2",
xlab="")
hist(simulation_means, breaks=10, prob=T,
main="Distribution of averages of samples,
drawn from exponential distribution with lambda=0.2",
xlab="")
hist(simulation_means, breaks=5, prob=T,
main="Distribution of averages of samples,
drawn from exponential distribution with lambda=0.2",
xlab="")
hist(simulation_means, breaks=6, prob=T,
main="Distribution of averages of samples,
drawn from exponential distribution with lambda=0.2",
xlab="")
hist(simulation_means, breaks=6, prob=T,
main="Distribution of averages of samples,
drawn from exponential distribution with lambda=0.2",
xlab="")
hist(simulation_means, breaks=6, prob=T,
main="Distribution of averages of samples,
drawn from exponential distribution with lambda=0.2",
xlab="")
hist(simulation_means, breaks=8, prob=T,
main="Distribution of averages of samples,
drawn from exponential distribution with lambda=0.2",
xlab="")
# density of the averages of samples
lines(density(simulation_means))
hist(simulation_means, breaks=50, prob=TRUE,
main="Distribution of averages of samples,
drawn from exponential distribution with lambda=0.2",
xlab="")
# density of the averages of samples
lines(density(simulation_means))
# theoretical center of distribution
abline(v=1/lambda, col="red")
# theoretical density of the averages of samples
xfit <- seq(min(simulation_means), max(simulation_means), length=100)
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(n)))
lines(xfit, yfit, pch=22, col="red", lty=2)
# add legend
legend('topright', c("simulation", "theoretical"), lty=c(1,2), col=c("black", "red"))
# compare the distribution of averages of 40 exponentials to a normal distribution
qqnorm(simulation_means)
qqline(simulation_means, col = 2)
install.packages("gridExtra")
---
source('~/.active-rstudio-document', echo=TRUE)
shiny::runApp('C:/Users/PC/Desktop/MOOC/module9/m9a1')
shiny::runApp('C:/Users/PC/Desktop/MOOC/module9/m9a1')
shiny::runApp('C:/Users/PC/Desktop/MOOC/module9/m9a1')
install.packages("RJSONIO")
shiny::runApp('C:/Users/PC/Desktop/MOOC/module9/m9a1')
install.packages("shinyapp")
install.packages("shinyapps")
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
install.packages("devtools")
devtools::install_github('rstudio/shinyapps')
install.packages("RCurl")
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='shentat',
token='5ADB3BB84888807DD3379662DF58249A',
secret='<SECRET>')
shinyapps::setAccountInfo(name='shentat',
token='5ADB3BB84888807DD3379662DF58249A',
secret='<SECRET>')
shinyapps::setAccountInfo(name='shentat',
token='5ADB3BB84888807DD3379662DF58249A',
secret='<SECRET>')
shinyapps::setAccountInfo(name='shentat',
token='5ADB3BB84888807DD3379662DF58249A',
secret='yViVXaH+v4n/tfhwJWvlSKlsMI3d4V25QcEkwFye')
shiny::runApp('C:/Users/PC/Desktop/MOOC/module9/m9a1')
shinyapps::setAccountInfo(name='shentat',
token='5ADB3BB84888807DD3379662DF58249A',
secret='yViVXaH+v4n/tfhwJWvlSKlsMI3d4V25QcEkwFye')
shinyapps::setAccountInfo(name='shentat',
token='5ADB3BB84888807DD3379662DF58249A',
secret='yViVXaH+v4n/tfhwJWvlSKlsMI3d4V25QcEkwFye')
devtools::install_github('rstudio/rsconnect')
library(rsconnect)
shinyapps::setAccountInfo(name='shentat', token='5ADB3BB84888807DD3379662DF58249A', secret='yViVXaH+v4n/tfhwJWvlSKlsMI3d4V25QcEkwFye')
shinyapps::setAccountInfo(name='shentat', token='5ADB3BB84888807DD3379662DF58249A', secret='yViVXaH+v4n/tfhwJWvlSKlsMI3d4V25QcEkwFye')
shinyapps::setAccountInfo(name='shentat', token='5ADB3BB84888807DD3379662DF58249A', secret='yViVXaH+v4n/tfhwJWvlSKlsMI3d4V25QcEkwFye')
rconnect::setAccountInfo(name='shentat', token='5ADB3BB84888807DD3379662DF58249A', secret='yViVXaH+v4n/tfhwJWvlSKlsMI3d4V25QcEkwFye')
rsconnect::setAccountInfo(name='shentat', token='5ADB3BB84888807DD3379662DF58249A', secret='yViVXaH+v4n/tfhwJWvlSKlsMI3d4V25QcEkwFye')
shiny::runApp('C:/Users/PC/Desktop/MOOC/module9/m9a1')
